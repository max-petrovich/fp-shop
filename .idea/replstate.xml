<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="ReplState" timestamp="1480676372038">{:repl-history {:ide [], :local [&quot;(def x (atom 10))&quot; &quot;(repeatedly 10\n            (fn [] (future (swap! x inc))))&quot; &quot;x&quot; &quot;(def user (ref {}))&quot; &quot;(dosync\n  (alter user merge {:name \&quot;Kim\&quot;})\n  (throw (Exception. \&quot;some wrong\&quot;))\n  (alter user merge {:age 32}))&quot; &quot;@user&quot; &quot;(def user-record (atom {}))&quot; &quot;(do\n  (swap! user-record merge {:name \&quot;Kim\&quot;})\n  (throw (Exception. \&quot;wrong\&quot;))\n  (swap! user-record merge {:age 32}))&quot; &quot;@user-record&quot; &quot;(def my-ref (ref 0))&quot; &quot;(future \n  (dosync \n    (alter my-ref inc)\n    (Thread/sleep 5000)))&quot; &quot;@my-ref&quot; &quot;(+1 1)&quot; &quot;(+ 1 1)&quot; &quot;(defn get-entity [name] \n  (ns-resolve 'shop.db.entities (symbol name)))&quot; &quot;(get-entity \&quot;users\&quot;)&quot; &quot;(get-entity \&quot;users3\&quot;)&quot; &quot;(get-entity \&quot;comments\&quot;)&quot; &quot;(defprotocol common-protocol\n  (get-records [this])\n  (get-record [this id]))&quot; &quot;(defn common-repository [entity-name] \n  {\n   :get-records (fn [this] (str params))\n   :get-record (fn [this params] (str params))\n   })&quot; &quot;(common-repository \&quot;ss\&quot;)&quot; &quot;(defn common-repo [name] {\n                          :get-records (fn [this] (str \&quot;get-record\&quot;))\n                          :get-record (fn [this params] (str params))\n                          })&quot; &quot;(extend test-repo \n  common-protocol\n  (common-repo \&quot;users\&quot;))&quot; &quot;(def test-repo (-&gt;test-repo))&quot; &quot;(def test-repository (-&gt;test-repo))&quot; &quot;(.get-records test-repository)&quot; &quot;(defn common-repo [name] {\n                          :get-records (fn [this] (str \&quot;hello maxic\&quot;))\n                          })&quot; &quot;(.get-records repo)&quot; &quot;(defn common-repo {:get-records (fn [this] (str \&quot;get-records\&quot;))})&quot; &quot;(defn common-repo [name] {:get-records (fn [this] (str \&quot;get-records\&quot;))})&quot; &quot;(extend test-repo\n  common-protocol\n  (common-repo \&quot;products\&quot;))&quot; &quot;(defprotocol common-protocol\n  (get-records [this]))&quot; &quot;(deftype test-repo [])&quot; &quot;(defn common-repo [name]\n  {\n   :get-records (fn [this] (str \&quot;get\&quot;))\n   })&quot; &quot;(extend test-repo\n  common-protocol\n  (common-repo \&quot;users\&quot;))&quot; &quot;(get-records test-repo)&quot; &quot;(def repo (-&gt;test-repo))&quot; &quot;(get-records repo)&quot; &quot;(deftype mail-service [smtp-spec]\n  (send [this data] (str data)))&quot; &quot;(deftype mail-service []\n  (send [this data] (str data)))&quot; &quot;(defprotocol mail-service-protocol\n  (send [this data]))&quot; &quot;(deftype mail-service [smtp-spec]\n  mail-service-protocol\n  (send-message [this data] (str data))\n  )&quot; &quot;(.send-message mail-service. {:maxic 1})&quot; &quot;(.send-message mail-service-&gt; {:maxic 1})&quot; &quot;(def mail-service mail-service.)&quot; &quot;(def mail-service -&gt;mail-service)&quot; &quot;(def mail-service mail-service-&gt;)&quot; &quot;(ns two)&quot; &quot;(deftype mail-service [])&quot; &quot;(deftype mail-service []\n  (send-message [this data] (str data)))&quot; &quot;(defprotocol mail-service-protocol \n  (send-message [this data]))&quot; &quot;(deftype mail-service [smtp-spec]\n  (send-message [this data] (str data)) )&quot; &quot;(deftype mail-service [smtp-spec]\n  mail-service-protocol\n  (send-message [this data] (str data)) )&quot; &quot;(.send-message mail-service. \&quot;dd\&quot;)&quot; &quot;(.send-message (mail-service.) \&quot;dd\&quot;)&quot; &quot;(-&gt;mail-service ({:host \&quot;3ww\&quot;}))&quot; &quot;(ns three)&quot; &quot;(deftype mail-service []\n  mail-service-protocol\n  (send-message [this data] (str data)))&quot; &quot;(def test (mail-service.))&quot; &quot;(def mail-service-test (mail-service.))&quot; &quot;(.send-message mail-service-test \&quot;sdasd\&quot;)&quot; &quot;(.send-message (mail-service.) \&quot;sdasdwqwe\&quot;)&quot; &quot;(ns four)&quot; &quot;(defprotocol mail-service\n  (send-message [this data]))&quot; &quot;(ns five)&quot; &quot;(defprotocol mail-service-protocol\n  (send-message [this data]))&quot; &quot;(deftype mail-service [&amp;opts]\n  mail-service-protocol\n  (send-message [this data] (str data \&quot;-\&quot; opts)))&quot; &quot;(deftype mail-service [opts]\n  mail-service-protocol\n  (send-message [this data] (str data \&quot;-\&quot; opts)))&quot; &quot;(.send-message (mail-service. {:host \&quot;local\&quot;}) \&quot;hello \&quot;)&quot; &quot;(def *agent* (agent mail-service. {:host \&quot;local\&quot;}))&quot; &quot;(def *mail-agent* (agent mail-service. {:host \&quot;local\&quot;}))&quot; &quot;(def mail-agent (agent mail-service. {:host \&quot;local\&quot;}))&quot; &quot;(def mail-agent (agent (mail-service. {:host \&quot;local\&quot;})))&quot; &quot;(send mail-agent .send-message {:name \&quot;maxic\&quot;})&quot; &quot;(send mail-agent send-message {:name \&quot;maxic\&quot;})&quot; &quot;(ns maxic)&quot; &quot;(:require postal.core :refer [send-message])&quot; &quot;(ns maxic (:require [post.core :refer [send-mssage]]))&quot; &quot;(ns maxic (:require [postal.core :refer [send-mssage]]))&quot; &quot;(ns maxic (:require [postal.core :refer [send-message]]))&quot; &quot;(defprotocol mail-service-protocol\n  (send-email [this data]))&quot; &quot;(deftype mail-service [&amp; opts]\n  mail-service-protocol\n  (send-email [this data] (send-message (:smtp opts) data)))&quot; &quot;(deftype mail-service [opts]\n  mail-service-protocol\n  (send-email [this data] (send-message (:smtp opts) data)))&quot; &quot;(def mail-agent (agent (mail-service. {:smtp {:host \&quot;smtp.gmail.com\&quot; :ssl true :user \&quot;unrelaxby@gmail.com\&quot; :pass \&quot;944x50x65\&quot;}})))&quot; &quot;(send mail-agent send-message {:from \&quot;unrelaxby@gmail.com\&quot;\n                               :to \&quot;unrelaxby@gmail.com\&quot;\n                               :subject \&quot;Hi!\&quot;\n                               :body \&quot;Test.\&quot;})&quot; &quot;@mail-agent&quot; &quot;(:status @mail-agent)&quot; &quot;(:ready @mail-agent)&quot; &quot;(:val @mail-agent)&quot; &quot;(def smtp {:host \&quot;smtp.gmail.com\&quot; :ssl true :user \&quot;unrelaxby@gmail.com\&quot; :pass \&quot;944x50x65\&quot;})&quot; &quot;(def email-msg {:from \&quot;unrelaxby@gmail.com\&quot;\n                :to \&quot;unrelaxby@gmail.com\&quot;\n                :subject \&quot;Hi!\&quot;\n                :body \&quot;Test.\&quot;})&quot; &quot;(.send-email (mail-service. smtp)  email-msg)&quot; &quot;(def raw-select\n  ['SELECT :name :role_name\n   ['FROM :Users ['JOIN :Roles ['ON :Users.role_id :Roles_id]]]\n   ['WHERE ['LIKE :Users.name \&quot;And%\&quot;]\n    ['LIMIT 100]]])&quot; &quot;raw-select&quot; &quot;[SELECT]&quot; &quot;([SELECT])&quot; &quot;(def test [SELECT])&quot; &quot;'SELECT&quot; &quot;[]&quot; &quot;['SELECT :users ['WHERE [:coms &gt; 1]]]&quot; &quot;['SELECT :users ['WHERE [:coms '&gt; 1]]]&quot;], :remote []}}</component>
</project>